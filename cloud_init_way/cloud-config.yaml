#cloud-config

package_update: true
package_upgrade: true

groups:
  - docker
  - ssl-cert
  - libvirt
  - kvm

users:
  - default
  - name: xrdp 
    primary_group: ssl-cert
  - name: user
    plain_text_passwd: 'ubuntumsi12'
    groups: ssl-cert, libvirt, kvm, docker
    lock_passwd: False
    sudo: False
    shell: /bin/bash

 
# INSTALING DOCKER
apt:
  sources:
    docker.list:
      source: deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable
      keyid: 9DC858229FC7DD38854AE2D88D81803C0EBFCD88
  
packages:
  - xorg
  - xinit
  - i3
  - xrdp
  - midori
  - debconf-utils
  - apt-transport-https 
  - ca-certificates 
  - curl 
  - gnupg-agent
  - software-properties-common
  - docker-ce
  - docker-ce-cli
  - containerd.io

# Enable ipv4 forwarding, required on CIS hardened machines
write_files:
  - path: /etc/sysctl.d/enabled_ipv4_forwarding.conf
    content: |
      net.ipv4.conf.all.forwarding=1
  - encoding: b64
    content: 
    owner: root:root
    path: /config
    permissions: '0644'
 
# Add default auto created user to docker group
system_info:
  default_user:
    groups: [docker]

runcmd:  
  - add-apt-repository "ppa:gns3/ppa" -y 
  - echo "wireshark-common wireshark-common/install-setuid boolean true" | debconf-set-selections
  - echo "ubridge ubridge/install-setuid boolean true" | debconf-set-selections
  - DEBIAN_FRONTEND=noninteractive apt-get install gns3-gui gns3-server -y 
  - usermod -aG ubridge,wireshark user
  - mkdir -p /home/user/.config/i3
  - mv /config /home/user/.config/i3/config
  - chown -R user /usr/bin/dumpcap
  - chown -R user /home/user
  - echo "exec i3" >> ~/.xinitrc
  - systemctl enable xrdp
  - ufw allow from any to any port 3389 proto tcp 
  - echo "KONEC"
  
power_state:
  mode: reboot 
  message: I'll be back...
