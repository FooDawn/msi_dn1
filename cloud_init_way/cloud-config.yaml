#cloud-config

package_update: true
package_upgrade: true

groups:
  - cloud-users
  - docker
  - ssl-cert

users:
  - default
  - name: xrdp 
    primary_group: ssl-cert
  - name: gns3_user
    plain_text_passwd: 'ubuntu_msi12'
    primary_group: cloud-users
    lock_passwd: False
    sudo: False

  
# INSTALING DOCKER
apt:
  sources:
    docker.list:
      source: deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable
      keyid: 9DC858229FC7DD38854AE2D88D81803C0EBFCD88
    ignored1:
      source: "ppa:gns3/ppa"
  
packages:
  - xorg
  - xinit
  - i3
  - midori
  - xrdp
  - apt-transport-https 
  - ca-certificates 
  - curl 
  - gnupg-agent
  - software-properties-common
  - docker-ce
  - docker-ce-cli
  - containerd.io
  - gns3-gui 
  - gns3-server

# Enable ipv4 forwarding, required on CIS hardened machines
write_files:
  - path: /etc/sysctl.d/enabled_ipv4_forwarding.conf
    content: |
      net.ipv4.conf.all.forwarding=1
  - encoding: b64
    content: IyBpMyBjb25maWcgZmlsZSAodjQpCiMKIyBQbGVhc2Ugc2VlIGh0dHBzOi8vaTN3bS5vcmcvZG9jcy91c2VyZ3VpZGUuaHRtbCBmb3IgYSBjb21wbGV0ZSByZWZlcmVuY2UhCiMKIyBUaGlzIGNvbmZpZyBmaWxlIHVzZXMga2V5Y29kZXMgKGJpbmRzeW0pIGFuZCB3YXMgd3JpdHRlbiBmb3IgdGhlIFFXRVJUWQojIGxheW91dC4KIwojIFRvIGdldCBhIGNvbmZpZyBmaWxlIHdpdGggdGhlIHNhbWUga2V5IHBvc2l0aW9ucywgYnV0IGZvciB5b3VyIGN1cnJlbnQKIyBsYXlvdXQsIHVzZSB0aGUgaTMtY29uZmlnLXdpemFyZAojCgojIEZvbnQgZm9yIHdpbmRvdyB0aXRsZXMuIFdpbGwgYWxzbyBiZSB1c2VkIGJ5IHRoZSBiYXIgdW5sZXNzIGEgZGlmZmVyZW50IGZvbnQKIyBpcyB1c2VkIGluIHRoZSBiYXIge30gYmxvY2sgYmVsb3cuCmZvbnQgcGFuZ286bW9ub3NwYWNlIDgKCiMgVGhpcyBmb250IGlzIHdpZGVseSBpbnN0YWxsZWQsIHByb3ZpZGVzIGxvdHMgb2YgdW5pY29kZSBnbHlwaHMsIHJpZ2h0LXRvLWxlZnQKIyB0ZXh0IHJlbmRlcmluZyBhbmQgc2NhbGFiaWxpdHkgb24gcmV0aW5hL2hpZHBpIGRpc3BsYXlzICh0aGFua3MgdG8gcGFuZ28pLgojZm9udCBwYW5nbzpEZWphVnUgU2FucyBNb25vIDgKCiMgVGhlIGNvbWJpbmF0aW9uIG9mIHhzcy1sb2NrLCBubS1hcHBsZXQgYW5kIHBhY3RsIGlzIGEgcG9wdWxhciBjaG9pY2UsIHNvCiMgdGhleSBhcmUgaW5jbHVkZWQgaGVyZSBhcyBhbiBleGFtcGxlLiBNb2RpZnkgYXMgeW91IHNlZSBmaXQuCgojIHhzcy1sb2NrIGdyYWJzIGEgbG9naW5kIHN1c3BlbmQgaW5oaWJpdCBsb2NrIGFuZCB3aWxsIHVzZSBpM2xvY2sgdG8gbG9jayB0aGUKIyBzY3JlZW4gYmVmb3JlIHN1c3BlbmQuIFVzZSBsb2dpbmN0bCBsb2NrLXNlc3Npb24gdG8gbG9jayB5b3VyIHNjcmVlbi4KZXhlYyAtLW5vLXN0YXJ0dXAtaWQgeHNzLWxvY2sgLS10cmFuc2Zlci1zbGVlcC1sb2NrIC0tIGkzbG9jayAtLW5vZm9yawoKIyBOZXR3b3JrTWFuYWdlciBpcyB0aGUgbW9zdCBwb3B1bGFyIHdheSB0byBtYW5hZ2Ugd2lyZWxlc3MgbmV0d29ya3Mgb24gTGludXgsCiMgYW5kIG5tLWFwcGxldCBpcyBhIGRlc2t0b3AgZW52aXJvbm1lbnQtaW5kZXBlbmRlbnQgc3lzdGVtIHRyYXkgR1VJIGZvciBpdC4KZXhlYyAtLW5vLXN0YXJ0dXAtaWQgbm0tYXBwbGV0CgojIFVzZSBwYWN0bCB0byBhZGp1c3Qgdm9sdW1lIGluIFB1bHNlQXVkaW8uCnNldCAkcmVmcmVzaF9pM3N0YXR1cyBraWxsYWxsIC1TSUdVU1IxIGkzc3RhdHVzCmJpbmRzeW0gWEY4NkF1ZGlvUmFpc2VWb2x1bWUgZXhlYyAtLW5vLXN0YXJ0dXAtaWQgcGFjdGwgc2V0LXNpbmstdm9sdW1lIEBERUZBVUxUX1NJTktAICsxMCUgJiYgJHJlZnJlc2hfaTNzdGF0dXMKYmluZHN5bSBYRjg2QXVkaW9Mb3dlclZvbHVtZSBleGVjIC0tbm8tc3RhcnR1cC1pZCBwYWN0bCBzZXQtc2luay12b2x1bWUgQERFRkFVTFRfU0lOS0AgLTEwJSAmJiAkcmVmcmVzaF9pM3N0YXR1cwpiaW5kc3ltIFhGODZBdWRpb011dGUgZXhlYyAtLW5vLXN0YXJ0dXAtaWQgcGFjdGwgc2V0LXNpbmstbXV0ZSBAREVGQVVMVF9TSU5LQCB0b2dnbGUgJiYgJHJlZnJlc2hfaTNzdGF0dXMKYmluZHN5bSBYRjg2QXVkaW9NaWNNdXRlIGV4ZWMgLS1uby1zdGFydHVwLWlkIHBhY3RsIHNldC1zb3VyY2UtbXV0ZSBAREVGQVVMVF9TT1VSQ0VAIHRvZ2dsZSAmJiAkcmVmcmVzaF9pM3N0YXR1cwoKIyB1c2UgdGhlc2Uga2V5cyBmb3IgZm9jdXMsIG1vdmVtZW50LCBhbmQgcmVzaXplIGRpcmVjdGlvbnMgd2hlbiByZWFjaGluZyBmb3IKIyB0aGUgYXJyb3dzIGlzIG5vdCBjb252ZW5pZW50CnNldCAkdXAgbApzZXQgJGRvd24gawpzZXQgJGxlZnQgagpzZXQgJHJpZ2h0IHNlbWljb2xvbgoKIyB1c2UgTW91c2UrTW9kMSB0byBkcmFnIGZsb2F0aW5nIHdpbmRvd3MgdG8gdGhlaXIgd2FudGVkIHBvc2l0aW9uCmZsb2F0aW5nX21vZGlmaWVyIE1vZDEKCiMgc3RhcnQgYSB0ZXJtaW5hbApiaW5kc3ltIE1vZDErUmV0dXJuIGV4ZWMgaTMtc2Vuc2libGUtdGVybWluYWwKCiMga2lsbCBmb2N1c2VkIHdpbmRvdwpiaW5kc3ltIE1vZDErU2hpZnQrcSBraWxsCgojIHN0YXJ0IGRtZW51IChhIHByb2dyYW0gbGF1bmNoZXIpCmJpbmRzeW0gTW9kMStkIGV4ZWMgZG1lbnVfcnVuCiMgVGhlcmUgYWxzbyBpcyB0aGUgKG5ldykgaTMtZG1lbnUtZGVza3RvcCB3aGljaCBvbmx5IGRpc3BsYXlzIGFwcGxpY2F0aW9ucwojIHNoaXBwaW5nIGEgLmRlc2t0b3AgZmlsZS4gSXQgaXMgYSB3cmFwcGVyIGFyb3VuZCBkbWVudSwgc28geW91IG5lZWQgdGhhdAojIGluc3RhbGxlZC4KIyBiaW5kc3ltIE1vZDErZCBleGVjIC0tbm8tc3RhcnR1cC1pZCBpMy1kbWVudS1kZXNrdG9wCgojIGNoYW5nZSBmb2N1cwpiaW5kc3ltIE1vZDErJGxlZnQgZm9jdXMgbGVmdApiaW5kc3ltIE1vZDErJGRvd24gZm9jdXMgZG93bgpiaW5kc3ltIE1vZDErJHVwIGZvY3VzIHVwCmJpbmRzeW0gTW9kMSskcmlnaHQgZm9jdXMgcmlnaHQKCiMgYWx0ZXJuYXRpdmVseSwgeW91IGNhbiB1c2UgdGhlIGN1cnNvciBrZXlzOgpiaW5kc3ltIE1vZDErTGVmdCBmb2N1cyBsZWZ0CmJpbmRzeW0gTW9kMStEb3duIGZvY3VzIGRvd24KYmluZHN5bSBNb2QxK1VwIGZvY3VzIHVwCmJpbmRzeW0gTW9kMStSaWdodCBmb2N1cyByaWdodAoKIyBtb3ZlIGZvY3VzZWQgd2luZG93CmJpbmRzeW0gTW9kMStTaGlmdCskbGVmdCBtb3ZlIGxlZnQKYmluZHN5bSBNb2QxK1NoaWZ0KyRkb3duIG1vdmUgZG93bgpiaW5kc3ltIE1vZDErU2hpZnQrJHVwIG1vdmUgdXAKYmluZHN5bSBNb2QxK1NoaWZ0KyRyaWdodCBtb3ZlIHJpZ2h0CgojIGFsdGVybmF0aXZlbHksIHlvdSBjYW4gdXNlIHRoZSBjdXJzb3Iga2V5czoKYmluZHN5bSBNb2QxK1NoaWZ0K0xlZnQgbW92ZSBsZWZ0CmJpbmRzeW0gTW9kMStTaGlmdCtEb3duIG1vdmUgZG93bgpiaW5kc3ltIE1vZDErU2hpZnQrVXAgbW92ZSB1cApiaW5kc3ltIE1vZDErU2hpZnQrUmlnaHQgbW92ZSByaWdodAoKIyBzcGxpdCBpbiBob3Jpem9udGFsIG9yaWVudGF0aW9uCmJpbmRzeW0gTW9kMStoIHNwbGl0IGgKCiMgc3BsaXQgaW4gdmVydGljYWwgb3JpZW50YXRpb24KYmluZHN5bSBNb2QxK3Ygc3BsaXQgdgoKIyBlbnRlciBmdWxsc2NyZWVuIG1vZGUgZm9yIHRoZSBmb2N1c2VkIGNvbnRhaW5lcgpiaW5kc3ltIE1vZDErZiBmdWxsc2NyZWVuIHRvZ2dsZQoKIyBjaGFuZ2UgY29udGFpbmVyIGxheW91dCAoc3RhY2tlZCwgdGFiYmVkLCB0b2dnbGUgc3BsaXQpCmJpbmRzeW0gTW9kMStzIGxheW91dCBzdGFja2luZwpiaW5kc3ltIE1vZDErdyBsYXlvdXQgdGFiYmVkCmJpbmRzeW0gTW9kMStlIGxheW91dCB0b2dnbGUgc3BsaXQKCiMgdG9nZ2xlIHRpbGluZyAvIGZsb2F0aW5nCmJpbmRzeW0gTW9kMStTaGlmdCtzcGFjZSBmbG9hdGluZyB0b2dnbGUKCiMgY2hhbmdlIGZvY3VzIGJldHdlZW4gdGlsaW5nIC8gZmxvYXRpbmcgd2luZG93cwpiaW5kc3ltIE1vZDErc3BhY2UgZm9jdXMgbW9kZV90b2dnbGUKCiMgZm9jdXMgdGhlIHBhcmVudCBjb250YWluZXIKYmluZHN5bSBNb2QxK2EgZm9jdXMgcGFyZW50CgojIGZvY3VzIHRoZSBjaGlsZCBjb250YWluZXIKI2JpbmRzeW0gTW9kMStkIGZvY3VzIGNoaWxkCgojIG1vdmUgdGhlIGN1cnJlbnRseSBmb2N1c2VkIHdpbmRvdyB0byB0aGUgc2NyYXRjaHBhZApiaW5kc3ltIE1vZDErU2hpZnQrbWludXMgbW92ZSBzY3JhdGNocGFkCgojIFNob3cgdGhlIG5leHQgc2NyYXRjaHBhZCB3aW5kb3cgb3IgaGlkZSB0aGUgZm9jdXNlZCBzY3JhdGNocGFkIHdpbmRvdy4KIyBJZiB0aGVyZSBhcmUgbXVsdGlwbGUgc2NyYXRjaHBhZCB3aW5kb3dzLCB0aGlzIGNvbW1hbmQgY3ljbGVzIHRocm91Z2ggdGhlbS4KYmluZHN5bSBNb2QxK21pbnVzIHNjcmF0Y2hwYWQgc2hvdwoKIyBEZWZpbmUgbmFtZXMgZm9yIGRlZmF1bHQgd29ya3NwYWNlcyBmb3Igd2hpY2ggd2UgY29uZmlndXJlIGtleSBiaW5kaW5ncyBsYXRlciBvbi4KIyBXZSB1c2UgdmFyaWFibGVzIHRvIGF2b2lkIHJlcGVhdGluZyB0aGUgbmFtZXMgaW4gbXVsdGlwbGUgcGxhY2VzLgpzZXQgJHdzMSAiMSIKc2V0ICR3czIgIjIiCnNldCAkd3MzICIzIgpzZXQgJHdzNCAiNCIKc2V0ICR3czUgIjUiCnNldCAkd3M2ICI2IgpzZXQgJHdzNyAiNyIKc2V0ICR3czggIjgiCnNldCAkd3M5ICI5IgpzZXQgJHdzMTAgIjEwIgoKIyBzd2l0Y2ggdG8gd29ya3NwYWNlCmJpbmRzeW0gTW9kMSsxIHdvcmtzcGFjZSBudW1iZXIgJHdzMQpiaW5kc3ltIE1vZDErMiB3b3Jrc3BhY2UgbnVtYmVyICR3czIKYmluZHN5bSBNb2QxKzMgd29ya3NwYWNlIG51bWJlciAkd3MzCmJpbmRzeW0gTW9kMSs0IHdvcmtzcGFjZSBudW1iZXIgJHdzNApiaW5kc3ltIE1vZDErNSB3b3Jrc3BhY2UgbnVtYmVyICR3czUKYmluZHN5bSBNb2QxKzYgd29ya3NwYWNlIG51bWJlciAkd3M2CmJpbmRzeW0gTW9kMSs3IHdvcmtzcGFjZSBudW1iZXIgJHdzNwpiaW5kc3ltIE1vZDErOCB3b3Jrc3BhY2UgbnVtYmVyICR3czgKYmluZHN5bSBNb2QxKzkgd29ya3NwYWNlIG51bWJlciAkd3M5CmJpbmRzeW0gTW9kMSswIHdvcmtzcGFjZSBudW1iZXIgJHdzMTAKCiMgbW92ZSBmb2N1c2VkIGNvbnRhaW5lciB0byB3b3Jrc3BhY2UKYmluZHN5bSBNb2QxK1NoaWZ0KzEgbW92ZSBjb250YWluZXIgdG8gd29ya3NwYWNlIG51bWJlciAkd3MxCmJpbmRzeW0gTW9kMStTaGlmdCsyIG1vdmUgY29udGFpbmVyIHRvIHdvcmtzcGFjZSBudW1iZXIgJHdzMgpiaW5kc3ltIE1vZDErU2hpZnQrMyBtb3ZlIGNvbnRhaW5lciB0byB3b3Jrc3BhY2UgbnVtYmVyICR3czMKYmluZHN5bSBNb2QxK1NoaWZ0KzQgbW92ZSBjb250YWluZXIgdG8gd29ya3NwYWNlIG51bWJlciAkd3M0CmJpbmRzeW0gTW9kMStTaGlmdCs1IG1vdmUgY29udGFpbmVyIHRvIHdvcmtzcGFjZSBudW1iZXIgJHdzNQpiaW5kc3ltIE1vZDErU2hpZnQrNiBtb3ZlIGNvbnRhaW5lciB0byB3b3Jrc3BhY2UgbnVtYmVyICR3czYKYmluZHN5bSBNb2QxK1NoaWZ0KzcgbW92ZSBjb250YWluZXIgdG8gd29ya3NwYWNlIG51bWJlciAkd3M3CmJpbmRzeW0gTW9kMStTaGlmdCs4IG1vdmUgY29udGFpbmVyIHRvIHdvcmtzcGFjZSBudW1iZXIgJHdzOApiaW5kc3ltIE1vZDErU2hpZnQrOSBtb3ZlIGNvbnRhaW5lciB0byB3b3Jrc3BhY2UgbnVtYmVyICR3czkKYmluZHN5bSBNb2QxK1NoaWZ0KzAgbW92ZSBjb250YWluZXIgdG8gd29ya3NwYWNlIG51bWJlciAkd3MxMAoKIyBrZXlib2FyZCBsYXlvdXQKc2V0ICRtcyBNb2Q0CmJpbmRzeW0gJG1zK3MgZXhlYyBzZXR4a2JtYXAgc2kKYmluZHN5bSAkbXMrdSBleGVjIHNldHhrYm1hcCB1cwpleGVjICJzZXR4a2JtYXAgLWxheW91dCBzaSIKCiMgcmVsb2FkIHRoZSBjb25maWd1cmF0aW9uIGZpbGUKYmluZHN5bSBNb2QxK1NoaWZ0K2MgcmVsb2FkCiMgcmVzdGFydCBpMyBpbnBsYWNlIChwcmVzZXJ2ZXMgeW91ciBsYXlvdXQvc2Vzc2lvbiwgY2FuIGJlIHVzZWQgdG8gdXBncmFkZSBpMykKYmluZHN5bSBNb2QxK1NoaWZ0K3IgcmVzdGFydAojIGV4aXQgaTMgKGxvZ3MgeW91IG91dCBvZiB5b3VyIFggc2Vzc2lvbikKYmluZHN5bSBNb2QxK1NoaWZ0K2UgZXhlYyAiaTMtbmFnYmFyIC10IHdhcm5pbmcgLW0gJ1lvdSBwcmVzc2VkIHRoZSBleGl0IHNob3J0Y3V0LiBEbyB5b3UgcmVhbGx5IHdhbnQgdG8gZXhpdCBpMz8gVGhpcyB3aWxsIGVuZCB5b3VyIFggc2Vzc2lvbi4nIC1CICdZZXMsIGV4aXQgaTMnICdpMy1tc2cgZXhpdCciCgojIHJlc2l6ZSB3aW5kb3cgKHlvdSBjYW4gYWxzbyB1c2UgdGhlIG1vdXNlIGZvciB0aGF0KQptb2RlICJyZXNpemUiIHsKICAgICAgICAjIFRoZXNlIGJpbmRpbmdzIHRyaWdnZXIgYXMgc29vbiBhcyB5b3UgZW50ZXIgdGhlIHJlc2l6ZSBtb2RlCgogICAgICAgICMgUHJlc3NpbmcgbGVmdCB3aWxsIHNocmluayB0aGUgd2luZG93w6LigqzihKJzIHdpZHRoLgogICAgICAgICMgUHJlc3NpbmcgcmlnaHQgd2lsbCBncm93IHRoZSB3aW5kb3fDouKCrOKEonMgd2lkdGguCiAgICAgICAgIyBQcmVzc2luZyB1cCB3aWxsIHNocmluayB0aGUgd2luZG93w6LigqzihKJzIGhlaWdodC4KICAgICAgICAjIFByZXNzaW5nIGRvd24gd2lsbCBncm93IHRoZSB3aW5kb3fDouKCrOKEonMgaGVpZ2h0LgogICAgICAgIGJpbmRzeW0gJGxlZnQgICAgICAgcmVzaXplIHNocmluayB3aWR0aCAxMCBweCBvciAxMCBwcHQKICAgICAgICBiaW5kc3ltICRkb3duICAgICAgIHJlc2l6ZSBncm93IGhlaWdodCAxMCBweCBvciAxMCBwcHQKICAgICAgICBiaW5kc3ltICR1cCAgICAgICAgIHJlc2l6ZSBzaHJpbmsgaGVpZ2h0IDEwIHB4IG9yIDEwIHBwdAogICAgICAgIGJpbmRzeW0gJHJpZ2h0ICAgICAgcmVzaXplIGdyb3cgd2lkdGggMTAgcHggb3IgMTAgcHB0CgogICAgICAgICMgc2FtZSBiaW5kaW5ncywgYnV0IGZvciB0aGUgYXJyb3cga2V5cwogICAgICAgIGJpbmRzeW0gTGVmdCAgICAgICAgcmVzaXplIHNocmluayB3aWR0aCAxMCBweCBvciAxMCBwcHQKICAgICAgICBiaW5kc3ltIERvd24gICAgICAgIHJlc2l6ZSBncm93IGhlaWdodCAxMCBweCBvciAxMCBwcHQKICAgICAgICBiaW5kc3ltIFVwICAgICAgICAgIHJlc2l6ZSBzaHJpbmsgaGVpZ2h0IDEwIHB4IG9yIDEwIHBwdAogICAgICAgIGJpbmRzeW0gUmlnaHQgICAgICAgcmVzaXplIGdyb3cgd2lkdGggMTAgcHggb3IgMTAgcHB0CgogICAgICAgICMgYmFjayB0byBub3JtYWw6IEVudGVyIG9yIEVzY2FwZSBvciBNb2QxK3IKICAgICAgICBiaW5kc3ltIFJldHVybiBtb2RlICJkZWZhdWx0IgogICAgICAgIGJpbmRzeW0gRXNjYXBlIG1vZGUgImRlZmF1bHQiCiAgICAgICAgYmluZHN5bSBNb2QxK3IgbW9kZSAiZGVmYXVsdCIKfQoKYmluZHN5bSBNb2QxK3IgbW9kZSAicmVzaXplIgoKIyBTdGFydCBpM2JhciB0byBkaXNwbGF5IGEgd29ya3NwYWNlIGJhciAocGx1cyB0aGUgc3lzdGVtIGluZm9ybWF0aW9uIGkzc3RhdHVzCiMgZmluZHMgb3V0LCBpZiBhdmFpbGFibGUpCmJhciB7CiAgICAgICAgc3RhdHVzX2NvbW1hbmQgaTNzdGF0dXMKfQo=
    owner: root:root
    path: /config
    permissions: '0644'

# Add default auto created user to docker group
system_info:
  default_user:
    groups: [docker]

 
runcmd:
  - add-apt-repository "ppa:gns3/ppa" -y 
  - DEBIAN_FRONTEND=noninteractive apt-get install gns3-gui gns3-server -y 
  - echo "exec i3" >> ~/.xinitrc
  - mkdir -p /home/gns3_user/.config/i3
  - mv /config /home/gns3_user/.config/i3/config
  - systemctl enable xrdp
  - ufw allow from any to any port 3389 proto tcp

users:
  - name: gns3_user
    groups: [ssl-cert, ubridge, libvirt, kvm, docker]

power_state:
  delay: "+30"
  mode: reboot 
  message: I'll be back
  timeout: 30
  condition: True

  # Valid Values:
#   lock_passwd: Defaults to true. Lock the password to disable password login
#   passwd: The hash -- not the password itself -- of the password you want
#           to use for this user. You can generate a safe hash via:
#               mkpasswd --method=SHA-512 --rounds=4096
#           (the above command would create from stdin an SHA-512 password hash
#           with 4096 salt rounds)
#
#           Please note: while the use of a hashed password is better than
#               plain text, the use of this feature is not ideal. Also,
#               using a high number of salting rounds will help, but it should
#               not be relied upon.
#
#               To highlight this risk, running John the Ripper against the
#               example hash above, with a readily available wordlist, revealed
#               the true password in 12 seconds on a i7-2620QM.
#
#               In other words, this feature is a potential security risk and is
#               provided for your convenience only. If you do not fully trust the
#               medium over which your cloud-config will be transmitted, then you
#               should use SSH authentication only.
#
#               You have thus been warned.
#   ssh_import_id: Optional. Import SSH ids
#   ssh_authorized_keys: Optional. [list] Add keys to user's authorized keys file
#   ssh_redirect_user: Optional. [bool] Set true to block ssh logins for cloud
#       ssh public keys and emit a message redirecting logins to
#       use <default_username> instead. This option only disables cloud
#       provided public-keys. An error will be raised if ssh_authorized_keys
#       or ssh_import_id is provided for the same user.
#
#       ssh_authorized_keys.